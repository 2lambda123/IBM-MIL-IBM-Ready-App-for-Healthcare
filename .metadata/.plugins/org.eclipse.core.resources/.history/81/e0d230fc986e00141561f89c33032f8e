package com.ibm.mil;

import io.selendroid.SelendroidCapabilities;
import io.selendroid.SelendroidConfiguration;
import io.selendroid.SelendroidDriver;
import io.selendroid.SelendroidKeys;
import io.selendroid.SelendroidLauncher;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

public class AndroidUtilities {

	private static final String ENCODING = "UTF-8";
	public static final long WAIT_TIME = 5000;

	public static Properties loadPopertiesFile(String pathToPropertiesFile) {
		Properties andoidProps = null;
		try {
			andoidProps = new Properties();
			File props = new File(pathToPropertiesFile);
			System.out.println("Attempting to load test.properties file : " + props.getAbsolutePath());
			andoidProps.load(new BufferedReader(new InputStreamReader(new FileInputStream(props.getAbsolutePath()), ENCODING)));
		} catch(Exception ex) {
			System.out.println("Failed to open " + pathToPropertiesFile+ ", cannot continue.");
			System.exit(1);
		}
		return andoidProps;
	}

	//setup the selendroid server
	public static SelendroidLauncher androidTestSetupSelendroid(SelendroidLauncher selendroidServer) throws Exception {
		SelendroidConfiguration config = new SelendroidConfiguration();
		
		//if you want to set the specific port to start the server on, defaults to 4444 
		//config.setPort(4445); 
		
		// Add the selendroid-test-app to the standalone server
		Properties propFile = AndroidUtilities.loadPopertiesFile("android.automated.testing.properties.tmpl");
		String defaultApp = "/Users/atcabral/Ready.App.Physical.Therapist/platforms/android/build/outputs/apk/android-debug.apk";
		//load props file into a Properties obj named propFile
		if (propFile.containsKey("APP_PATH") && !"".equals(propFile.get("APP_PATH"))) {
			defaultApp = (String) propFile.get("APP_PATH");
		}
		config.addSupportedApp(defaultApp);
		selendroidServer = new SelendroidLauncher(config);
		selendroidServer.launchSelendroid();

		try {
			Thread.sleep(20000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return selendroidServer;
	}
	
	//set up the web driver
	public static WebDriver androidTestSetupWebDriver(WebDriver driver) throws Exception {
		SelendroidCapabilities caps = new SelendroidCapabilities(
				"com.ibm.cio.be.MIL.ReadyAppPT:0.0.1");
		driver = new SelendroidDriver(caps);
		
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return driver;
	}

	public static void androidTestTeardownDriver(WebDriver driver) {
		if (driver != null) {
			driver.quit();
		}
	}
	
	public static void androidTestTeardownServer(SelendroidLauncher selendroidServer) {
		if (selendroidServer != null) {
			selendroidServer.stopSelendroid();
		}
	}
	
	public static WebElement waitForElement(WebDriver driver, String elementId) {
		int iterations = 20;
		WebElement elem = null;
		for (int i = 0 ; i < iterations ; ++i ) {
			try {
				elem = driver.findElement(By.id(elementId));
				elem.click();
				System.out.println("elementid: " + elementId + ", elem: " + elem);
				break;
			} catch (Exception ex) {
				System.out.println("got exception ex on loop: " + i + ", " + ex.getMessage());
				System.out.println("iterator: " + i + ", elemid: " + elementId);
				if (i == (iterations - 1)) {
					throw (ex);
				} else {
					try { Thread.sleep(WAIT_TIME); } catch (Exception ex2) {}
				}
			}
		}
		return elem;
	}
	
	public static void closeKeyboard(WebDriver driver) {
		new Actions(driver).sendKeys(SelendroidKeys.BACK).perform(); 
	}
} 